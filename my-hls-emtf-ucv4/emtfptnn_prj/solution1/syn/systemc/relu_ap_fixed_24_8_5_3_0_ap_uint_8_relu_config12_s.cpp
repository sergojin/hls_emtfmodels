// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "relu_ap_fixed_24_8_5_3_0_ap_uint_8_relu_config12_s.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic relu_ap_fixed_24_8_5_3_0_ap_uint_8_relu_config12_s::ap_const_logic_1 = sc_dt::Log_1;
const bool relu_ap_fixed_24_8_5_3_0_ap_uint_8_relu_config12_s::ap_const_boolean_1 = true;
const sc_lv<24> relu_ap_fixed_24_8_5_3_0_ap_uint_8_relu_config12_s::ap_const_lv24_0 = "000000000000000000000000";
const sc_lv<32> relu_ap_fixed_24_8_5_3_0_ap_uint_8_relu_config12_s::ap_const_lv32_10 = "10000";
const sc_lv<32> relu_ap_fixed_24_8_5_3_0_ap_uint_8_relu_config12_s::ap_const_lv32_17 = "10111";
const sc_lv<8> relu_ap_fixed_24_8_5_3_0_ap_uint_8_relu_config12_s::ap_const_lv8_0 = "00000000";
const sc_logic relu_ap_fixed_24_8_5_3_0_ap_uint_8_relu_config12_s::ap_const_logic_0 = sc_dt::Log_0;

relu_ap_fixed_24_8_5_3_0_ap_uint_8_relu_config12_s::relu_ap_fixed_24_8_5_3_0_ap_uint_8_relu_config12_s(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return_0);
    sensitive << ( select_ln1494_fu_62_p3 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( select_ln1494_1_fu_86_p3 );

    SC_METHOD(thread_icmp_ln1494_1_fu_70_p2);
    sensitive << ( data_1_V_read );

    SC_METHOD(thread_icmp_ln1494_fu_46_p2);
    sensitive << ( data_0_V_read );

    SC_METHOD(thread_p_Result_1_fu_76_p4);
    sensitive << ( data_1_V_read );

    SC_METHOD(thread_p_Result_s_fu_52_p4);
    sensitive << ( data_0_V_read );

    SC_METHOD(thread_select_ln1494_1_fu_86_p3);
    sensitive << ( icmp_ln1494_1_fu_70_p2 );
    sensitive << ( p_Result_1_fu_76_p4 );

    SC_METHOD(thread_select_ln1494_fu_62_p3);
    sensitive << ( icmp_ln1494_fu_46_p2 );
    sensitive << ( p_Result_s_fu_52_p4 );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "relu_ap_fixed_24_8_5_3_0_ap_uint_8_relu_config12_s_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, data_0_V_read, "(port)data_0_V_read");
    sc_trace(mVcdFile, data_1_V_read, "(port)data_1_V_read");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, icmp_ln1494_fu_46_p2, "icmp_ln1494_fu_46_p2");
    sc_trace(mVcdFile, p_Result_s_fu_52_p4, "p_Result_s_fu_52_p4");
    sc_trace(mVcdFile, icmp_ln1494_1_fu_70_p2, "icmp_ln1494_1_fu_70_p2");
    sc_trace(mVcdFile, p_Result_1_fu_76_p4, "p_Result_1_fu_76_p4");
    sc_trace(mVcdFile, select_ln1494_fu_62_p3, "select_ln1494_fu_62_p3");
    sc_trace(mVcdFile, select_ln1494_1_fu_86_p3, "select_ln1494_1_fu_86_p3");
#endif

    }
}

relu_ap_fixed_24_8_5_3_0_ap_uint_8_relu_config12_s::~relu_ap_fixed_24_8_5_3_0_ap_uint_8_relu_config12_s() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void relu_ap_fixed_24_8_5_3_0_ap_uint_8_relu_config12_s::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void relu_ap_fixed_24_8_5_3_0_ap_uint_8_relu_config12_s::thread_ap_return_0() {
    ap_return_0 = select_ln1494_fu_62_p3.read();
}

void relu_ap_fixed_24_8_5_3_0_ap_uint_8_relu_config12_s::thread_ap_return_1() {
    ap_return_1 = select_ln1494_1_fu_86_p3.read();
}

void relu_ap_fixed_24_8_5_3_0_ap_uint_8_relu_config12_s::thread_icmp_ln1494_1_fu_70_p2() {
    icmp_ln1494_1_fu_70_p2 = (!data_1_V_read.read().is_01() || !ap_const_lv24_0.is_01())? sc_lv<1>(): (sc_bigint<24>(data_1_V_read.read()) > sc_bigint<24>(ap_const_lv24_0));
}

void relu_ap_fixed_24_8_5_3_0_ap_uint_8_relu_config12_s::thread_icmp_ln1494_fu_46_p2() {
    icmp_ln1494_fu_46_p2 = (!data_0_V_read.read().is_01() || !ap_const_lv24_0.is_01())? sc_lv<1>(): (sc_bigint<24>(data_0_V_read.read()) > sc_bigint<24>(ap_const_lv24_0));
}

void relu_ap_fixed_24_8_5_3_0_ap_uint_8_relu_config12_s::thread_p_Result_1_fu_76_p4() {
    p_Result_1_fu_76_p4 = data_1_V_read.read().range(23, 16);
}

void relu_ap_fixed_24_8_5_3_0_ap_uint_8_relu_config12_s::thread_p_Result_s_fu_52_p4() {
    p_Result_s_fu_52_p4 = data_0_V_read.read().range(23, 16);
}

void relu_ap_fixed_24_8_5_3_0_ap_uint_8_relu_config12_s::thread_select_ln1494_1_fu_86_p3() {
    select_ln1494_1_fu_86_p3 = (!icmp_ln1494_1_fu_70_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln1494_1_fu_70_p2.read()[0].to_bool())? p_Result_1_fu_76_p4.read(): ap_const_lv8_0);
}

void relu_ap_fixed_24_8_5_3_0_ap_uint_8_relu_config12_s::thread_select_ln1494_fu_62_p3() {
    select_ln1494_fu_62_p3 = (!icmp_ln1494_fu_46_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln1494_fu_46_p2.read()[0].to_bool())? p_Result_s_fu_52_p4.read(): ap_const_lv8_0);
}

}

